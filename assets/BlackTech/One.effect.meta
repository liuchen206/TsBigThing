{
  "ver": "1.0.15",
  "uuid": "680b4e85-9a65-4ae9-a782-4418246d4e21",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\nuniform float iTime;\nuniform float nodeWidth;\nuniform float nodeHeight;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\n#define NB 1.\n#define MAX_VEL .5\n\nfloat sdFish(float i, vec2 p, float a) {\n    \n    float ds, c = cos(a), s = sin(a);\n    p *= 20.*mat2(c,s,-s,c); \n    p.x *= .97 + (.04+.2*p.y)*cos(i+9.*iTime);  \n    ds = min(length(p-vec2(.8,0))-.45, length(p-vec2(-.14,0))-.12);   \n    p.y = abs(p.y)+.13;\n    return max(min(length(p),length(p-vec2(.56,0)))-.3,-ds)*.05;\n}\n\nvoid mainImage(out vec4 cout,in vec2 uv) {\n  vec2 iResolution = vec2(nodeWidth,nodeHeight);\n  vec2 p = 1./iResolution.xy; \n  float d, m = 1e6;\n  vec4 c, ct, fish;\n\n  for(float i=0.; i<NB; i++) {       \n      vec4 color = v_color;\n      #if USE_TEXTURE\n        color *= texture2D(texture, v_uv0);\n        #if _USE_ETC1_TEXTURE\n          color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n        #endif\n      #endif\n\n      fish = color; \n      m = min(m, d = sdFish(i, fish.xy-uv.xy*p.y, atan(fish.w,fish.z))); \n      \n      ct += mix(vec4(0,0,1,1), vec4(1,0,0,1), length(fish.zw)/MAX_VEL)*(2./(1.+3e3*d*d*d) + .5/(1.+30.*d*d)); \n  }\n  \n  \n  cout = vec4(0,0,0,0);\n}\n\nvoid main () { \n  vec4 color = v_color;\n\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n\n  \n  \n\n  \n  vec2 iResolution = vec2(nodeWidth,nodeHeight);\n  vec2 fragCoord = v_uv0.xy*iResolution.xy; \n  \n  mainImage(gl_FragColor,fragCoord);\n}\n\n\n"
    }
  ],
  "subMetas": {}
}