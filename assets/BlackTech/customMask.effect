// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif

uniform vec2 pologenPoints_1;
uniform vec2 pologenPoints_2;
uniform vec2 pologenPoints_3;
uniform vec2 pologenPoints_4;
uniform vec2 pologenPoints_5;
uniform vec2 pologenPoints_6;
uniform vec2 pologenPoints_7;
uniform vec2 pologenPoints_8;
uniform vec2 pologenPoints_9;
uniform vec2 pologenPoints_10;
uniform vec2 pologenPoints_11;
uniform vec2 pologenPoints_12;
uniform vec2 pologenPoints_13;
uniform vec2 pologenPoints_14;
uniform vec2 pologenPoints_15;
uniform vec2 pologenPoints_16;
uniform vec2 pologenPoints_17;
uniform vec2 pologenPoints_18;
uniform vec2 pologenPoints_19;
uniform vec2 pologenPoints_20;
uniform vec2 pologenPoints_21;
uniform vec2 pologenPoints_22;
uniform vec2 pologenPoints_23;
uniform vec2 pologenPoints_24;
uniform vec2 pologenPoints_25;
uniform vec2 pologenPoints_26;
uniform vec2 pologenPoints_27;
uniform vec2 pologenPoints_28;
uniform vec2 pologenPoints_29;
uniform vec2 pologenPoints_30;
uniform vec2 pologenPoints_31;
uniform vec2 pologenPoints_32;
uniform vec2 pologenPoints_33;

uniform int Points_Num;

#include <alpha-test>

varying lowp vec4 v_color;

float xross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }

vec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )
{
    vec2 e = b-a;
    vec2 f = d-a;
    vec2 g = a-b+c-d;
    vec2 h = p-a;
        
    float k2 = xross( g, f );
    float k1 = xross( e, f ) + xross( h, g );
    float k0 = xross( h, e );
    
    float w = k1*k1 - 4.0*k0*k2;
    
    if( w<0.0 ) return vec2(-1.0);

    w = sqrt( w );
    
    float v1 = (-k1 - w)/(2.0*k2);
    float v2 = (-k1 + w)/(2.0*k2);
    float u1 = (h.x - f.x*v1)/(e.x + g.x*v1);
    float u2 = (h.x - f.x*v2)/(e.x + g.x*v2);
    bool  b1 = v1>0.0 && v1<1.0 && u1>0.0 && u1<1.0;
    bool  b2 = v2>0.0 && v2<1.0 && u2>0.0 && u2<1.0;
    
    vec2 res = vec2(-1.0);

    if(  b1 && !b2 ) res = vec2( u1, v1 );
    if( !b1 &&  b2 ) res = vec2( u2, v2 );
    
    return res;
}
bool innerNgonFill( vec2 uv, vec2 PPi , vec2 PPj , bool isInner )
{
    if (( PPi.y < uv.y && PPj.y >= uv.y || PPj.y < uv.y && PPi.y >= uv.y ) && ( PPi.x <= uv.x || PPj.x <= uv.x )) 
    {
        if ( PPi.x + ( uv.y - PPi.y ) / ( PPj.y -PPi.y ) * ( PPj.x - PPi.x ) < uv.x ) 
        {
            isInner=!isInner; 
        }
    }  

    return isInner;
}

bool ngonFill( vec2 uv )
{
    bool  isInner = false;
    // instead for 
    vec2 points[33]; 
    points[0] = pologenPoints_1;  
    points[1] = pologenPoints_2;  
    points[2] = pologenPoints_3;  
    points[3] = pologenPoints_4;  
    points[4] = pologenPoints_5; 
    points[5] = pologenPoints_6; 
    points[6] = pologenPoints_7; 
    points[7] = pologenPoints_8; 
    points[8] = pologenPoints_9; 
    points[9] = pologenPoints_10; 
    points[10] = pologenPoints_11; 
    points[11] = pologenPoints_12; 
    points[12] = pologenPoints_13; 
    points[13] = pologenPoints_14; 
    points[14] = pologenPoints_15; 
    points[15] = pologenPoints_16; 
    points[16] = pologenPoints_17; 
    points[17] = pologenPoints_18; 
    points[18] = pologenPoints_19; 
    points[19] = pologenPoints_20; 
    points[20] = pologenPoints_21; 
    points[21] = pologenPoints_22; 
    points[22] = pologenPoints_23; 
    points[23] = pologenPoints_24; 
    points[24] = pologenPoints_25; 
    points[25] = pologenPoints_26; 
    points[26] = pologenPoints_27; 
    points[27] = pologenPoints_28; 
    points[28] = pologenPoints_29; 
    points[29] = pologenPoints_30; 
    points[30] = pologenPoints_31; 
    points[31] = pologenPoints_32; 
    points[32] = pologenPoints_33; 
    for(int i = 0; i< 33;i++){
      if(i < (Points_Num-1)){
        isInner = innerNgonFill( uv , points[i] , points[i+1] , isInner ) ;     
      }else{
        isInner = innerNgonFill( uv , points[i] , points[0] , isInner ) ; 
        break;   
      }
    }
    // if(Points_Num == 6){
    //   isInner = innerNgonFill( uv , pologenPoints_1 , pologenPoints_2 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_2 , pologenPoints_3 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_3 , pologenPoints_4 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_4 , pologenPoints_5 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_5 , pologenPoints_6 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_6 , pologenPoints_1 , isInner ) ; 
    // }
    // if(Points_Num == 5){
    //   isInner = innerNgonFill( uv , pologenPoints_1 , pologenPoints_2 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_2 , pologenPoints_3 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_3 , pologenPoints_4 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_4 , pologenPoints_5 , isInner ) ;     
    //   isInner = innerNgonFill( uv , pologenPoints_5 , pologenPoints_1 , isInner ) ;     
    // }
    return isInner;   
} 
void main () {
  vec4 color = v_color;

  #if USE_TEXTURE
    color *= texture2D(texture, v_uv0);
    #if _USE_ETC1_TEXTURE
      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r; 
    #endif
  #endif

  ALPHA_TEST(color);

  if(Points_Num >= 3){
    vec2 uv = v_uv0;
    uv -= .5;
    uv.y *= -1.0; 
    // vec2 texUv = invBilinear( uv, edgePoints_1, edgePoints_2, edgePoints_3, edgePoints_4);
    if(ngonFill(uv)){  
    // if(uv.y > 0.3){
      // color.a = 1.0;
    }else{
      color.a = 0.0;
    }
  }

  gl_FragColor = color;
}

}
