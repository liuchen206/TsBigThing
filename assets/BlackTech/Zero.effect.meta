{
  "ver": "1.0.15",
  "uuid": "c0928756-43f2-4c27-a457-d06c5041b2ca",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\nuniform float iTime;\nuniform float nodeWidth;\nuniform float nodeHeight;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\n\t\n\tvec4 draw(vec2 uv) {\n\t\treturn texture2D(texture, uv).rgba;\n\t}\n\t\n\t\n\tfloat rand(vec2 co) {\n\t\treturn fract(sin(dot(co.xy , vec2(12.9898, 78.233))) * 43758.5453);\n\t}\n\t\n\t\n\tvec4 dim(vec4 col, float factor) {\n\t\treturn vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n\t}\n  void mainImage( out vec4 fragColor, in vec2 fragCoord )\n  {\n    vec2 iResolution = vec2(nodeWidth,nodeHeight);\n    \n    \n\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    float tau = 3.1415926535*2.0;\n    float a = atan(p.x,p.y);\n    float r = length(p)*0.75;\n    vec2 uv = vec2(a/tau,r);\n    \n    \n    float xCol = (uv.x - (iTime / 3.0)) * 3.0;\n    xCol = mod(xCol, 3.0);\n    vec3 horColour = vec3(0.25, 0.25, 0.25);\n    \n    if (xCol < 1.0) {\n      horColour.r += 1.0 - xCol;\n      horColour.g += xCol;\n    }\n    else if (xCol < 2.0) {\n      xCol -= 1.0;\n      horColour.g += 1.0 - xCol;\n      horColour.b += xCol;\n    }\n    else {\n      xCol -= 2.0;\n      horColour.b += 1.0 - xCol;\n      horColour.r += xCol;\n    }\n\n    \n    uv = (2.0 * uv) - 1.0;\n    float beamWidth = (0.7+0.5*cos(uv.x*10.0*tau*0.15*clamp(floor(5.0 + 10.0*cos(iTime)), 0.0, 10.0))) * abs(1.0 / (30.0 * uv.y));\n    vec3 horBeam = vec3(beamWidth);\n    vec3 rgb = (( horBeam) * horColour);\n    fragColor = vec4(rgb.xyz, 1.0);\n  }\n\nvoid main () {\n  vec4 color = v_color;\n\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n\n  gl_FragColor = color;\n\n  \n  vec2 iResolution = vec2(nodeWidth,nodeHeight);\n  vec2 fragCoord = v_uv0.xy*iResolution.xy; \n  \n  mainImage(gl_FragColor,fragCoord);\n\n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n    \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n\n  \n  \n}\n\n\n"
    }
  ],
  "subMetas": {}
}