{
  "ver": "1.0.15",
  "uuid": "8dfe6c5f-e70f-48b7-8b39-4ccf0b536d69",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\nuniform vec2 pologenPoints_1;\nuniform vec2 pologenPoints_2;\nuniform vec2 pologenPoints_3;\nuniform vec2 pologenPoints_4;\nuniform vec2 pologenPoints_5;\nuniform vec2 pologenPoints_6;\nuniform vec2 pologenPoints_7;\nuniform vec2 pologenPoints_8;\nuniform vec2 pologenPoints_9;\nuniform vec2 pologenPoints_10;\nuniform vec2 pologenPoints_11;\nuniform vec2 pologenPoints_12;\nuniform vec2 pologenPoints_13;\nuniform vec2 pologenPoints_14;\nuniform vec2 pologenPoints_15;\nuniform vec2 pologenPoints_16;\nuniform vec2 pologenPoints_17;\nuniform vec2 pologenPoints_18;\nuniform vec2 pologenPoints_19;\nuniform vec2 pologenPoints_20;\nuniform vec2 pologenPoints_21;\nuniform vec2 pologenPoints_22;\nuniform vec2 pologenPoints_23;\nuniform vec2 pologenPoints_24;\nuniform vec2 pologenPoints_25;\nuniform vec2 pologenPoints_26;\nuniform vec2 pologenPoints_27;\nuniform vec2 pologenPoints_28;\nuniform vec2 pologenPoints_29;\nuniform vec2 pologenPoints_30;\nuniform vec2 pologenPoints_31;\nuniform vec2 pologenPoints_32;\nuniform vec2 pologenPoints_33;\n\nuniform int Points_Num;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\nfloat xross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = xross( g, f );\n    float k1 = xross( e, f ) + xross( h, g );\n    float k0 = xross( h, e );\n    \n    float w = k1*k1 - 4.0*k0*k2;\n    \n    if( w<0.0 ) return vec2(-1.0);\n\n    w = sqrt( w );\n    \n    float v1 = (-k1 - w)/(2.0*k2);\n    float v2 = (-k1 + w)/(2.0*k2);\n    float u1 = (h.x - f.x*v1)/(e.x + g.x*v1);\n    float u2 = (h.x - f.x*v2)/(e.x + g.x*v2);\n    bool  b1 = v1>0.0 && v1<1.0 && u1>0.0 && u1<1.0;\n    bool  b2 = v2>0.0 && v2<1.0 && u2>0.0 && u2<1.0;\n    \n    vec2 res = vec2(-1.0);\n\n    if(  b1 && !b2 ) res = vec2( u1, v1 );\n    if( !b1 &&  b2 ) res = vec2( u2, v2 );\n    \n    return res;\n}\nbool innerNgonFill( vec2 uv, vec2 PPi , vec2 PPj , bool isInner )\n{\n    if (( PPi.y < uv.y && PPj.y >= uv.y || PPj.y < uv.y && PPi.y >= uv.y ) && ( PPi.x <= uv.x || PPj.x <= uv.x )) \n    {\n        if ( PPi.x + ( uv.y - PPi.y ) / ( PPj.y -PPi.y ) * ( PPj.x - PPi.x ) < uv.x ) \n        {\n            isInner=!isInner; \n        }\n    }  \n\n    return isInner;\n}\n\nbool ngonFill( vec2 uv )\n{\n    bool  isInner = false;\n    \n    vec2 points[33]; \n    points[0] = pologenPoints_1;  \n    points[1] = pologenPoints_2;  \n    points[2] = pologenPoints_3;  \n    points[3] = pologenPoints_4;  \n    points[4] = pologenPoints_5; \n    points[5] = pologenPoints_6; \n    points[6] = pologenPoints_7; \n    points[7] = pologenPoints_8; \n    points[8] = pologenPoints_9; \n    points[9] = pologenPoints_10; \n    points[10] = pologenPoints_11; \n    points[11] = pologenPoints_12; \n    points[12] = pologenPoints_13; \n    points[13] = pologenPoints_14; \n    points[14] = pologenPoints_15; \n    points[15] = pologenPoints_16; \n    points[16] = pologenPoints_17; \n    points[17] = pologenPoints_18; \n    points[18] = pologenPoints_19; \n    points[19] = pologenPoints_20; \n    points[20] = pologenPoints_21; \n    points[21] = pologenPoints_22; \n    points[22] = pologenPoints_23; \n    points[23] = pologenPoints_24; \n    points[24] = pologenPoints_25; \n    points[25] = pologenPoints_26; \n    points[26] = pologenPoints_27; \n    points[27] = pologenPoints_28; \n    points[28] = pologenPoints_29; \n    points[29] = pologenPoints_30; \n    points[30] = pologenPoints_31; \n    points[31] = pologenPoints_32; \n    points[32] = pologenPoints_33; \n    for(int i = 0; i< 33;i++){\n      if(i < (Points_Num-1)){\n        isInner = innerNgonFill( uv , points[i] , points[i+1] , isInner ) ;     \n      }else{\n        isInner = innerNgonFill( uv , points[i] , points[0] , isInner ) ; \n        break;   \n      }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return isInner;   \n} \nvoid main () {\n  vec4 color = v_color;\n\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r; \n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n\n  if(Points_Num >= 3){\n    vec2 uv = v_uv0;\n    uv -= .5;\n    uv.y *= -1.0; \n    \n    if(ngonFill(uv)){  \n    \n      \n    }else{\n      color.a = 0.0;\n    }\n  }\n\n  gl_FragColor = color;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}