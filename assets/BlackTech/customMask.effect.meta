{
  "ver": "1.0.15",
  "uuid": "8dfe6c5f-e70f-48b7-8b39-4ccf0b536d69",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\nuniform vec2 pologenPoints_1;\nuniform vec2 pologenPoints_2;\nuniform vec2 pologenPoints_3;\nuniform vec2 pologenPoints_4;\nuniform vec2 pologenPoints_5;\nuniform vec2 pologenPoints_6;\nuniform vec2 pologenPoints_close;\n\nuniform int Points_Num;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\nbool innerNgonFill( vec2 uv, vec2 PPi , vec2 PPj , bool isInner )\n{\n    if (( PPi.y < uv.y && PPj.y >= uv.y || PPj.y < uv.y && PPi.y >= uv.y ) && ( PPi.x <= uv.x || PPj.x <= uv.x )) \n    {\n        if ( PPi.x + ( uv.y - PPi.y ) / ( PPj.y -PPi.y ) * ( PPj.x - PPi.x ) < uv.x ) \n        {\n            isInner=!isInner; \n        }\n    }  \n\n    return isInner;\n}\n\nbool ngonFill( vec2 uv )\n{\n    bool  isInner = false;\n    \n    vec2 points[33]; \n    points[0] = pologenPoints_1;  \n    points[1] = pologenPoints_2;  \n    points[2] = pologenPoints_3;  \n    points[3] = pologenPoints_4;  \n    points[4] = pologenPoints_5; \n    points[5] = pologenPoints_6; \n    for(int i = 0;i < 33 ;i++){\n      if(i < Points_Num){\n        isInner = innerNgonFill( uv , points[i] , points[i+1] , isInner ) ;     \n      }else{\n        break;\n      }\n    }\n    return isInner;   \n} \nvoid main () {\n  vec4 color = v_color;\n\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r; \n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n\n  if(Points_Num >= 3){\n    vec2 uv = v_uv0;\n    uv -= .5;\n    uv.y *= -1.0; \n    if(ngonFill(uv)){  \n    \n      \n    }else{\n      color.a = 0.2;\n    }\n  }\n\n  gl_FragColor = color;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}